#!/bin/sh

set -eu

echo(){
	printf '%s\n' "$*"
}

try_path(){
	var="$1"
	separator="$2"
	shift
	for ent in $@
	do
		if test -e "$ent"
		then eval "$var=\"\$$var$separator$ent\""
		fi
	done
}

test_cflag(){
	echo "int main(void){return 0;}" >"$tmpc"
	$CC $CFLAGS_CONFIGURE "$1" "$tmpc" -o "$tmpc.e"
	e=$?
	rm -f "$tmpc.e"
	return $e
}

try_cflag(){
	printf 'checking whether compiler accepts %s... ' "$1"

	if test_cflag "$1" 2>/dev/null
	then
		CFLAGS="$CFLAGS $1"
		echo yes
	else
		echo no
	fi
}

usage(){
	cat >&2 <<!
Usage: $0 [OPTIONS...] [CC/CFLAGS/LDFLAGS=...]

Options:
	--target=..., --host=...    Build for target machine
	--with-ucc-lib              Include and link against local lib/
	--enable-debug              Build with debug symbols [enabled]
	--enable-optimize           Build with optimisations

CC, CFLAGS and LDFLAGS are pulled from the environment if not specified
!
	exit 1
}

# globals
local_label_prefix=.L
need_dsym=0
section_text=".text"
section_data=".data"
section_bss=".bss"
section_rodata=".rodata"
section_ctors=".init_array,\"aw\""
section_dtors=".fini_array,\"aw\""
section_dbg_abbrev=".debug_abbrev"
section_dbg_info=".debug_info"
section_dbg_line=".debug_line"
dwarf_indirect_section_links=0
asm_weak_directive='weak'
asm_visibility_hidden_directive='hidden'
as_supports_local_common=1
asm_supports_visibility_protected=1
ld_indirect_call_via_plt=1
default_leading_underscore=0
default_fpic=0
local_lib=0

debug=1
optimise=0

target=

ucc_initflags=
ucc_startfiles=
ucc_dyn=
ucc_stdinc=
ucc_stdlib=
ucc_ldflags=
ucc_postlink=
ucc_paramshared=-shared
ucc_paramstatic=-static

CFLAGS_CONFIGURE=

for arg
do
	case "$arg" in
		--target=*|--host=*)
			target=${arg#*=}
			;;

		--with-ucc-lib)
			local_lib=1
			;;

		--enable-debug|--enable-debug=yes) debug=1 ;;
		--disable-debug|--enable-debug=no) debug=0 ;;

		--enable-optimi[sz]e|--enable-optimi[sz]e=yes) optimise=1 ;;
		--disable-optimi[sz]e|--enable-optimi[sz]e=no) optimise=0 ;;

		CC=*) CC=${arg#*=} ;;
		CFLAGS=*) CFLAGS=${arg#*=} ;;
		LDFLAGS=*) LDFLAGS=${arg#*=} ;;

		*)
			usage
			;;
	esac
done

# find temporary file
set +u
test -n "$TMPDIR" || TMPDIR=/tmp
set -u

i=0
while :
do
	tmpc="$TMPDIR/ucc_configure.$$.$i.c"
	set +C
	echo >"$tmpc" && break
	set -C
	if test $i = 100
	then
		echo >&2 "$0: can't create temporary file"
		exit 1
	fi
	i=$(expr $i + 1)
done
test -z "$tmpc" && exit 1
trap "rm -f $tmpc" EXIT

# set CC, CFLAGS and LDFLAGS if they don't exist
set +u
test -n "$CC" || CC=cc
test -n "$CFLAGS" || CFLAGS=
test -n "$LDFLAGS" || LDFLAGS=

# CFLAGS_CONFIGURE inherits command-line CFLAGS and LDFLAGS
CFLAGS_CONFIGURE="$CFLAGS_CONFIGURE $CFLAGS $LDFLAGS"
set -u

printf 'checking target... '
test -n "$target" || target=$($CC -dumpmachine) || target=unknown
printf '%s\n' "$target"
arch="${target%%-*}"

try_path ucc_stdinc ' -isystem ' "/usr/include"
try_path ucc_stdinc ' -isystem ' "/usr/local/include"

# OS defaults
case "$target" in
	*linux*)
		# assume gcc
		ucc_dyn="-dynamic-linker /lib64/ld-linux-x86-64.so.2"
		ucc_stdlib="-lc"

		try_path ucc_startfiles ' ' /usr/lib/"${target}"/crt1.o
		try_path ucc_startfiles ' ' /usr/lib/"${target}"/crti.o
		try_path ucc_startfiles ' ' /usr/lib/"${target}"/crtn.o

		gcc_inc=$(echo /usr/lib/gcc/$target/*/ | tr ' ' '\n' | sort | tail -1)
		echo "Borrowing gcc-$(basename "$gcc_inc")'s include/"

		try_path ucc_stdinc ' -isystem ' "/usr/include/$target"
		try_path ucc_stdinc ' -isystem ' "$gcc_inc/include"
		;;

	*freebsd*)
		ucc_startfiles="/usr/lib/crt1.o /usr/lib/crti.o /usr/lib/crtbegin.o /usr/lib/crtend.o /usr/lib/crtn.o"
		ucc_stdlib="-lc"
		;;

	*-apple-*)
		section_text="__TEXT,__text"
		section_data="__DATA,__data"
		section_bss="__BSS,__bss"
		section_rodata="__DATA,__const"
		section_ctors="__DATA,__mod_init_func,mod_init_funcs"
		section_dtors="__DATA,__mod_term_func,mod_term_funcs"
		section_dbg_abbrev="__DWARF,__debug_abbrev,regular,debug"
		section_dbg_info="__DWARF,__debug_info,regular,debug"
		section_dbg_line="__DWARF,__debug_line,regular,debug"
		dwarf_indirect_section_links=1

		asm_weak_directive='weak_reference'
		asm_visibility_hidden_directive='private_extern'
		# Darwin also needs "-flat_namespace -undefined suppress"
		as_supports_local_common=0
		asm_supports_visibility_protected=0
		ld_indirect_call_via_plt=0
		ucc_initflags='-mpreferred-stack-boundary=4 -malign-is-p2' # 2^4 = 16 byte aligned
		ucc_stdlib='-lSystem'
		ucc_startfiles=''
		ucc_ldflags="-macosx_version_min 10.11"
		local_label_prefix=L
		need_dsym=1
		default_leading_underscore=1
		default_fpic=1
		ucc_postlink='%{debug:dsymutil %{out}}'
		ucc_paramshared=-dylib
		;;

	CYGWIN_NT-* | *-pc-cygwin)
		default_leading_underscore=1
		section_ctors=".ctors,\"w\""
		section_dtors=".dtors,\"w\""
		if test "$arch" = i686
		then arch=x86_64
		fi
		;;

	*)
		echo "$0: unknown target ($target)" >&2
		exit 1
		;;
esac

# platform/ABI setup
if test $default_leading_underscore = 1
then
	ucc_initflags="-fleading-underscore $ucc_initflags"
fi
if test $default_fpic = 1
then
	ucc_initflags="-fpic $ucc_initflags"
fi

case "$target" in
	*arm*)
		ucc_initflags="-fshort-enums $ucc_initflags"
		;;
esac

if test $local_lib = 1
then
	ucc_stdinc="-isystem %{bindir}/../../lib/"
	ucc_startfiles="%{bindir}/../../lib/crt.a"
	ucc_stdlib="%{bindir}/../../lib/libc.a"
	ucc_ldflags="$ucc_ldflags -static"
	ucc_dyn=''
fi

test_cflag -Werror=unknown-warning-option 2>/dev/null \
	&& CFLAGS_CONFIGURE="$CFLAGS_CONFIGURE -Werror=unknown-warning-option"

try_cflag -std=c99

try_cflag -Wall
try_cflag -Wextra
try_cflag -pedantic


try_cflag -Werror=incompatible-pointer-types
try_cflag -Werror=implicit-function-declaration

try_cflag -Wmissing-prototypes
try_cflag -Wstrict-prototypes

try_cflag -Wno-char-subscripts
try_cflag -Wno-format-extra-args
try_cflag -Wno-missing-braces
try_cflag -Wno-missing-field-initializers
try_cflag -Wno-logical-not-parentheses
try_cflag -Wno-implicit-fallthrough

try_cflag -Wsuggest-attribute=pure
try_cflag -Wsuggest-attribute=const

try_cflag -Werror=incompatible-pointer-types

if test $debug = 1
then
	try_cflag -g
fi

if test $optimise = 1
then
	try_cflag -O
fi

# write configs
printf 'writing config.mk... '
cat > src/config.mk <<!
# generated by configure $@

CC = ${CC}
CFLAGS = ${CFLAGS}
LDFLAGS = ${LDFLAGS}

ARCH = $arch
TARGET = $target
!
echo 'done'

printf 'writing ucc.spec... '
cat > src/ucc.spec <<!
# available for %{bool:str}: static, shared, startfiles, debug, stdlib, stdinc
# available for %{name}: out, bindir

initflags:
	$ucc_initflags
	%{stdinc:$ucc_stdinc}
	%{stdinc:-isystem %{bindir}/../../include}

as:
	as

asflags:

ld:
	ld

ldflags_pre_user:
	$ucc_dyn
	$ucc_ldflags
	%{shared:$ucc_paramshared}
	%{static:$ucc_paramstatic}

	# An object file's unresolved symbols must
	# be _later_ in the linker's argv array.
	# crt, user files, then stdlib
	%{startfiles:$ucc_startfiles}

ldflags_post_user:
	%{stdlib:$ucc_stdlib}

post-link:
	$ucc_postlink
!
echo 'done'

printf 'writing config_as.h... '
cat > src/config_as.h <<!
/* generated by configure $@ */

#define SECTION_NAME_TEXT $section_text
#define SECTION_NAME_DATA $section_data
#define SECTION_NAME_BSS  $section_bss
#define SECTION_NAME_RODATA $section_rodata
#define SECTION_NAME_CTORS $section_ctors
#define SECTION_NAME_DTORS $section_dtors
#define SECTION_NAME_DBG_ABBREV $section_dbg_abbrev
#define SECTION_NAME_DBG_INFO $section_dbg_info
#define SECTION_NAME_DBG_LINE $section_dbg_line
#define DWARF_INDIRECT_SECTION_LINKS $dwarf_indirect_section_links
#define ASM_PLBL_PRE "$local_label_prefix"
#define ASM_WEAK_DIRECTIVE "$asm_weak_directive"
#define ASM_VISIBILITY_HIDDEN_DIRECTIVE "$asm_visibility_hidden_directive"
#define AS_SUPPORTS_VISIBILITY_PROTECTED $asm_supports_visibility_protected
#define AS_SUPPORTS_LOCAL_COMMON $as_supports_local_common
#define LD_INDIRECT_CALL_VIA_PLT $ld_indirect_call_via_plt
!
echo 'done'

printf 'writing lib/config.mk... '
cat > lib/config.mk <<!
# generated by configure $@

ARCH = $arch
!
echo 'done'

echo "Configured for $target"
